Before:
    Save g:fugitive_cgit_domains
    Save g:fugitive_browse_handlers

    unlet! g:fugitive_browse_handlers
    let g:fugitive_cgit_domains = ['git.example.com']

    unlet! g:loaded_fugitive_cgit
    unlet! g:autoloaded_fugitive_cgit_utils
    unlet! g:autoloaded_fugitive_cgit_fugitive
    runtime plugin/cgit.vim
    runtime autoload/cgit/utils.vim
    runtime autoload/cgit/fugitive.vim

After:
    Restore g:fugitive_cgit_domains
    Restore g:fugitive_browse_handlers

Execute (GBrowse - blob):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - blob with range):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'commit': 'a935a734765575b33da6c50fe8d0175e70e0e542',
      \'type': 'blob',
      \'path': 'myfile.vim',
      \'line1': 1,
      \'line2': 3,
    \}
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?id=a935a734765575b33da6c50fe8d0175e70e0e542#n1', url

Execute (GBrowse - directory tree):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'tree',
      \'path': 'path1/path2'
    \}
    let url = g:fugitive_browse_handlers[0](opts)
    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/path1/path2?h=master', url

Execute (GBrowse - commit type):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'commit': 'a935a734765575b33da6c50fe8d0175e70e0e542',
      \'type': 'commit',
    \}
    let g:fugitive_cgit_domains = ['https://git.example.com']
    let url = g:fugitive_browse_handlers[0](opts)
    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/commit/?id=a935a734765575b33da6c50fe8d0175e70e0e542', url

Execute (GBrowse - branch refs):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'path': '.git/refs/heads/master',
    \}
    let g:fugitive_cgit_domains = ['https://git.example.com']
    let url = g:fugitive_browse_handlers[0](opts)
    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/log/?h=master', url

Execute (GBrowse - tag refs):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'path': '.git/refs/tags/0.1.2',
    \}
    let g:fugitive_cgit_domains = ['https://git.example.com']
    let url = g:fugitive_browse_handlers[0](opts)
    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tag/?h=0.1.2', url

Execute (GBrowse - ssh remote):
    let opts = {
      \'remote': 'git@git.example.com:fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    unlet! g:fugitive_cgit_domains
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual '', url

    let g:fugitive_cgit_domains = ['https://git.example.com']
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - https remote):
    let opts = {
      \'remote': 'https://git.example.com/fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    let g:fugitive_cgit_domains = ['https://git.example.com']
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - https remote with @):
    let opts = {
      \'remote': 'https://user@git.example.com/fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - Long form ssh remote):
    let opts = {
      \'remote': 'ssh://git@git.example.com/fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - Long form ssh remote with non-standard port):
    let opts = {
      \'remote': 'ssh://git@git.example.com:222/fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - Short form ssh remote with non-standard ssh user):
    let opts = {
      \'remote': 'user@git.example.com:git/fugitive-cgit.vim.git',
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}
    let g:fugitive_cgit_domains = {
      \ 'git.example.com': {
      \     'root': 'https://git.example.com',
      \     'prefix': 'git',
      \ }
    \}
    let url = g:fugitive_browse_handlers[0](opts)

    AssertEqual 'https://git.example.com/fugitive-cgit.vim.git/tree/myfile.vim?h=master', url

Execute (GBrowse - Does not match specified remote):
    let opts = {
      \'commit': 'master',
      \'type': 'blob',
      \'path': 'myfile.vim'
    \}

    let url = g:fugitive_browse_handlers[0](opts)
    AssertEqual '', url

    let remotes = [
        \ 'git@other.example.com/fugitive-cgit.vim.git',
        \ 'git@other.example.com:12345/fugitive-cgit.vim.git',
        \ 'user@other.example.com:12345/fugitive-cgit.vim.git',
        \ 'https://user:pass@other.example.com:443/fugitive-cgit.vim.git',
        \ 'https://user@other.example.com/fugitive-cgit.vim.git',
        \ 'https://other.example.com/fugitive-cgit.vim.git',
    \ ]

    for remote in remotes
        let opts.remote = remote

        let url = g:fugitive_browse_handlers[0](opts)
        AssertEqual '', url
    endfor

" vim: set ts=4 sw=4 et :
